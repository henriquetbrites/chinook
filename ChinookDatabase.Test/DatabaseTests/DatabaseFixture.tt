<#@ template hostspecific="True"#>
<#@ output extension="cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="..\..\ChinookDatabase\_T4Templates\Chinook.ttinclude" #>
<#@ include file="..\..\ChinookDatabase\_T4Templates\Manager.ttinclude" #>
<#
var options = new [] {
						new Option
						{
							Strategy = new SqlServerStrategy(),
							ConnectionClass = "SqlConnection",
							AdapterClass = "SqlDataAdapter",
							Namespace = "System.Data.SqlClient",
							ConnectionNames = new[] {"Chinook_SqlServer", "Chinook_SqlServer_AutoIncrement"}
						},
						new Option 
						{
							Strategy = new SqlServerCompactStrategy(),
							ConnectionClass = "SqlCeConnection",
							AdapterClass = "SqlCeDataAdapter",
							Namespace = "System.Data.SqlServerCe",
							ConnectionNames = new[] {"Chinook_SqlServerCompact", "Chinook_SqlServerCompact_AutoIncrement"}
						},
						new Option 
						{
							Strategy = new MySqlStrategy(),
							ConnectionClass = "MySqlConnection",
							AdapterClass = "MySqlDataAdapter",
							Namespace = "MySql.Data.MySqlClient",
							ConnectionNames = new[] {"Chinook_MySql", "Chinook_MySql_AutoIncrement"}
						},
						new Option 
						{
							Strategy = new SqliteStrategy(),
							ConnectionClass = "SQLiteConnection",
							AdapterClass = "SQLiteDataAdapter",
							Namespace = "Devart.Data.SQLite",
							ConnectionNames = new[] {"Chinook_Sqlite", "Chinook_Sqlite_AutoIncrement"}
						},
						new Option 
						{
							Strategy = new EffiProzStrategy(),
							ConnectionClass = "EfzConnection",
							AdapterClass = "EfzDataAdapter",
							Namespace = "System.Data.EffiProz",
							ConnectionNames = new[] {"Chinook_EffiProz", "Chinook_EffiProz_AutoIncrement"}
						},
						new Option 
						{
							Strategy = new OracleStrategy(),
							ConnectionClass = "OleDbConnection",
							AdapterClass = "OleDbDataAdapter",
							Namespace = "System.Data.OleDb",
							ConnectionNames = new[] {"Chinook_Oracle"}
						}
					};

// Read the existing store item collection from the edmx file.
var version = new Version("2.0.0.0");
var modelFile = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\ChinookDatabase\Chinook.edmx");
IList<EdmSchemaError> existingSsdlErrors;
var existingStore = EdmExtension.CreateStoreItemCollection(EdmHelper.GetSsdlFromEdmx(modelFile), 
														   version,
														   out existingSsdlErrors);

var fileManager = Manager.Create(Host, GenerationEnvironment);
foreach (Option option in options)
{
	var connectionValues = option.GetConnectionValues();
	var filename = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), option.GetClassName() + ".cs");
	fileManager.StartNewFile(filename);
	
#>/*******************************************************************************
 * Chinook Database - Version <#= DataSetHelper.GetVersionNumber() #>
 * Description: Test fixture for Chinook database.
 * DB Server: <#= option.Strategy.Name #>
 * Author: Luis Rocha
 * License: http://www.codeplex.com/ChinookDatabase/license
 * 
 * IMPORTANT: In order to run these test fixtures, you will need to:
 *            1. Run the generated SQL script to create the database to be tested.
 *            2. Verify that app.config has the proper connection string (user/password).
 ********************************************************************************/
using System;
using System.Configuration;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using NUnit.Framework;
using <#= option.Namespace #>;

<#
    FileInfo thisFile = new FileInfo(Host.TemplateFile);
    ChinookDataSet ds = new ChinookDataSet();
    ds.ReadXml(thisFile.DirectoryName + @"\..\..\ChinookDatabase\DataSources\_Xml\ChinookData.xml");
#>
namespace ChinookDatabase.Test.DatabaseTests
{
    /// <summary>
    /// Test fixtures for <#= option.Strategy.Name #> databases.
    /// </summary>
    [TestFixture]
    public partial class <#= option.GetClassName() #>
    {
        protected IDictionary<string, <#= option.ConnectionClass #>> Connections;

<#
	if ((option.Strategy as EffiProzStrategy)==null)
	{
#>
        /// <summary>
        /// Retrieves the cached connection object.
        /// </summary>
        /// <param name="connectionName">Connection name in the configuration file.</param>
        /// <returns>A connection object for this specific database.</returns>
        protected <#= option.ConnectionClass #> GetConnection(string connectionName)
        {
            // Creates an ADO.NET connection to the database, if not created yet.
            if (!Connections.ContainsKey(connectionName))
            {
                var section = (ConnectionStringsSection)ConfigurationManager.GetSection("connectionStrings");

                foreach (var entry in section.ConnectionStrings.Cast<ConnectionStringSettings>()
                                                                .Where(entry => entry.Name == connectionName))
                {
                    Connections[connectionName] = new <#= option.ConnectionClass #>(entry.ConnectionString);
                    break;
                }

                // If we failed to create a connection, then throw an exception.
                if (!Connections.ContainsKey(connectionName))
                    throw new ApplicationException("There is no connection string defined in app.config file.");
            }

            return Connections[connectionName];
        }

<#
	}
#>
        /// <summary>
        /// Method to execute a SQL query and return a dataset.
        /// </summary>
        /// <param name="connectionName">Connection name in the configuration file.</param>
        /// <param name="query">Query string to be executed.</param>
        /// <returns>DataSet with the query results.</returns>
        protected DataSet ExecuteQuery(string connectionName, string query)
        {
            var dataset = new DataSet();
			var connection = GetConnection(connectionName);

            // Verify if number of entities match number of records.
            using (var adapter = new <#= option.AdapterClass #>(query, connection))
            {
                adapter.Fill(dataset);
            }

            return dataset;
        }
        
        /// <summary>
        /// Initialize connections dictionary.
        /// </summary>
        [TestFixtureSetUp]
        public void Init()
        {
            Connections = new Dictionary<string, <#= option.ConnectionClass #>>();
        }

        /// <summary>
        /// Close all connections.
        /// </summary>
        [TestFixtureTearDown]
        public void Dispose()
        {
            foreach (var connection in Connections.Values)
            {
                connection.Close();
            }
        }

<# 
	var invoiceEntity = (from e in existingStore.GetAllEntitySets() where e.Name == "Invoice" select e).Single();
	var schema = invoiceEntity.GetSchemaName();
	
	var invoice = option.Strategy.GetFullyQualifiedName(schema, invoiceEntity.Name);
	var invoiceId = option.Strategy.FormatName("InvoiceId");
	var invoiceLine = option.Strategy.GetFullyQualifiedName(schema, "InvoiceLine");
	var total = option.Strategy.FormatName("Total");
	var unitPrice = option.Strategy.FormatName("UnitPrice");
	var quantity = option.Strategy.FormatName("Quantity");
	
	var query1 = string.Format("SELECT count({0}) FROM {1} WHERE {0} NOT IN (SELECT {0} FROM {2} GROUP BY {0})", 
								invoiceId, invoice, invoiceLine).Replace("\"","\\\"");
	var query2 = string.Format("SELECT {0}.{1}, SUM({2}.{3} * {2}.{4}) AS CalculatedTotal, {0}.{5} AS Total FROM {2} INNER JOIN {0} ON {2}.{1} = {0}.{1} GROUP BY {0}.{1}, {0}.{5}",
								invoice, invoiceId, invoiceLine, unitPrice, quantity, total).Replace("\"","\\\"");

#>
        /// <summary>
        /// Asserts that all invoices contain invoice lines.
        /// </summary>
        [Test]
        public void AllInvoicesMustHaveInvoiceLines([Values(<#= connectionValues #>)] string connectionName)
        {
            var dataSet = ExecuteQuery(connectionName, "<#= query1 #>");
            Assert.That(dataSet.Tables[0].Rows[0][0], Is.EqualTo(0), "The number of invoices with no invoice lines must be zero.");
        }
        
        /// <summary>
        /// Asserts that invoice total matches sum of invoice lines.
        /// </summary>
        [Test]
        public void InvoiceTotalMustMatchSumOfInvoiceLines([Values(<#= connectionValues #>)] string connectionName)
        {
            var dataSet = ExecuteQuery(connectionName, "<#= query2 #>");

            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                Assert.That(row["CalculatedTotal"].ToString(), Is.EqualTo(row["Total"].ToString()), string.Format("The total field of InvoiceId={0} does not match its invoice lines.", row["InvoiceId"]));
            }
        }
<#
    foreach (DataTable table in ds.Tables)
    {
		var entitySet = (from e in existingStore.GetAllEntitySets() where e.Name == table.TableName select e).Single();
		var fqTableName = option.Strategy.GetFullyQualifiedName(entitySet.GetSchemaName(), table.TableName).Replace("\"","\\\"");
		var keys = from item in entitySet.ElementType.GetKeyProperties() select item;
		var fqPrimaryKeys = option.Strategy.GetColumns(keys, ',').Replace("\"","\\\"");
#>

        /// <summary>
        /// Verifies that the <#= table.TableName #> table was populated properly.
        /// </summary>
        [Test]
        public void <#= table.TableName #>TableShouldBePopulated([Values(<#= connectionValues #>)] string connectionName)
        {
            var dataSet = ExecuteQuery(connectionName, "SELECT * FROM <#= fqTableName #>");
            Assert.That(dataSet.Tables[0].Rows.Count, Is.EqualTo(<#= table.Rows.Count #>), "Total number of records mismatch.");
        }

        /// <summary>
        /// Verifies that last record of <#= table.TableName #> table has the proper information.
        /// </summary>
        [Test]
        public void <#= table.TableName #>LastRecordHasProperInfo([Values(<#= connectionValues #>)] string connectionName)
        {
            var dataSet = ExecuteQuery(connectionName, "SELECT * FROM <#= fqTableName #> ORDER BY <#= fqPrimaryKeys #>");
            var table = dataSet.Tables[0];
            Assert.IsNotNull(table);
            var row = table.Rows[table.Rows.Count - 1];
            Assert.IsNotNull(row);

			// Assert that the last record has the proper information.            
<#
		int num = table.Rows.Count - 1;
		foreach (DataColumn col in table.Columns)
		{
			string expected = DataSetHelper.GetExpectedValue(col, table.Rows[num][col.ColumnName].ToString());
#>            Assert.That(row["<#= col.ColumnName #>"].ToString(), Is.EqualTo(<#= expected #>), "<#= col.ColumnName #> mismatch.");
<#
		} // foreach column
#>        }
<#
    } // foreach table
#>

<#
	var customerEntity = (from e in existingStore.GetAllEntitySets() where e.Name == "Customer" select e).Single();
	var customerSchema = customerEntity.GetSchemaName();
	var customer = option.Strategy.GetFullyQualifiedName(customerSchema, "Customer").Replace("\"","\\\"");
	var customerId = option.Strategy.FormatName("CustomerId").Replace("\"","\\\"");
	
    for (int i=0; i <= 10; i++)
    {
#>
        /// <summary>
        /// Verifies that the Unicode characters are populated properly.
        /// </summary>
        [Test]
        public void CustomerId<#= (i+1).ToString("D2") #>HasProperUnicodeCharacters([Values(<#= connectionValues #>)] string connectionName)
        {
            var dataSet = ExecuteQuery(connectionName, "SELECT * FROM <#= customer #> WHERE <#= customerId #> = <#= i+1 #>");
            Assert.That(dataSet.Tables[0].Rows.Count, Is.EqualTo(1), "Cannot find the Customer record that contains unicode characters. This record was not added to the Customer table or the SQL script did not use Unicode characters properly.");
            var row = dataSet.Tables[0].Rows[0];
            
<#
		foreach (DataColumn col in ds.Tables["Customer"].Columns)
		{
			string expected = DataSetHelper.GetExpectedValue(col, ds.Tables["Customer"].Rows[i][col.ColumnName].ToString());
#>            Assert.That(row["<#= col.ColumnName #>"].ToString(), Is.EqualTo(<#= expected #>), "<#= col.ColumnName #> mismatch.");
<#
		}
#>
		}
		
<#
    } // foreach table
#>
    }
	
}
<# 
	fileManager.EndBlock();
}

fileManager.Process(true);

#>
namespace ChinookDatabase.Test.DatabaseTests
{
    public class DatabaseFixture
    {
	}
}
<#+ 
	public class Option
	{
		public IDdlStrategy Strategy { get; set; }
		public string ConnectionClass { get; set; }
		public string AdapterClass { get; set; }
		public string Namespace { get; set; }
		public IList<string> ConnectionNames { get; set; }
		
		public string GetConnectionValues()
		{
			return GetValues(ConnectionNames, ',');
		}
		
		public string GetClassName()
		{
			return string.Format("Chinook{0}Fixture", Strategy.Name);
		}
	}
	
    private static string GetValues(IEnumerable<string> values, char delimiter)
    {
        var builder = new StringBuilder();
        foreach (var value in values)
        {
            builder.AppendFormat("\"{0}\"{1} ", value, delimiter);
        }
        return builder.ToString().Trim().TrimEnd(delimiter);
    }
	
#>